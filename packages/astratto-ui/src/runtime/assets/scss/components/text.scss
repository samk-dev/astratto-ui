:root {
  --au-text-lead-font-size: var(--au-globa-large-font-size);
  --au-text-lead-line-height: 1.5;
  --au-text-lead-color: var(--au-color-text-emphasis);

  --au-text-meta-font-size: var(--au-global-small-font-size);
  --au-text-meta-line-height: 1.4;
  --au-text-meta-color: var(--au-global-color-muted);

  --au-text-small-font-size: var(--au-global-small-font-size);
  --au-text-small-line-height: 1.5;

  --au-text-large-font-size: var(--au-global-large-font-size);
  --au-text-large-line-height: 1.5;

  --au-text-default-font-size: var(--au-global-font-size);
  --au-text-default-line-height: var(--au-global-font-line-height);

  --au-text-lighter: lighter;
  --au-text-light: 300;
  --au-text-normal: 400;
  --au-text-bold: 700;
  --au-text-bolder: bolder;

  --au-text-italic: italic;

  --au-text-capitalize: capitalize !important;
  --au-text-uppercase: uppercase !important;
  --au-text-lowercase: lowercase !important;

  --au-text-background: var(--au-global-color-primary);
}

/* ========================================================================
   Component: Text
 ========================================================================== */

/* Style modifiers
 ========================================================================== */

.uk-text-lead {
  font-size: var(--au-text-lead-font-size);
  line-height: var(--au-text-lead-line-height);
  color: var(--au-text-lead-color);
  @if (mixin-exists(hook-text-lead)) {
    @include hook-text-lead();
  }
}

.uk-text-meta {
  font-size: var(--au-text-meta-font-size);
  line-height: var(--au-text-meta-line-height);
  color: var(--au-text-meta-color);
  @if (mixin-exists(hook-text-meta)) {
    @include hook-text-meta();
  }
}

/* Size modifiers
 ========================================================================== */

.uk-text-small {
  font-size: var(--au-text-small-font-size);
  line-height: var(--au-text-small-line-height);
  @if (mixin-exists(hook-text-small)) {
    @include hook-text-small();
  }
}

.uk-text-large {
  font-size: var(--au-text-large-font-size);
  line-height: var(--au-text-large-line-height);
  @if (mixin-exists(hook-text-large)) {
    @include hook-text-large();
  }
}

.uk-text-default {
  font-size: var(--au-text-default-font-size);
  line-height: var(--au-text-default-line-height);
}

/* Weight modifier
 ========================================================================== */

.uk-text-light {
  font-weight: var(--au-text-light);
}
.uk-text-normal {
  font-weight: var(--au-text-normal);
}
.uk-text-bold {
  font-weight: var(--au-text-bold);
}

.uk-text-lighter {
  font-weight: var(--au-text-lighter);
}
.uk-text-bolder {
  font-weight: var(--au-text-bolder);
}

/* Style modifier
 ========================================================================== */

.uk-text-italic {
  font-style: var(--au-text-italic);
}

/* Transform modifier
 ========================================================================== */

.uk-text-capitalize {
  text-transform: var(--au-text-capitalize);
}
.uk-text-uppercase {
  text-transform: var(--au-text-uppercase);
}
.uk-text-lowercase {
  text-transform: var(--au-text-lowercase);
}

/* Decoration modifier
 ========================================================================== */

.uk-text-decoration-none {
  text-decoration: none !important;
}

/* Color modifiers
 ========================================================================== */

@each $color, $variants in $color-variants {
  @include generate-color-classes('text', $color, $variants);
}

/* Background modifier
 ========================================================================== */

/*
 * 1. The background clips to the foreground text. Works in all browsers.
 * 2. Default color is set to transparent.
 * 3. Container fits the text
 * 4. Style
 */

.uk-text-background {
  /* 1 */
  -webkit-background-clip: text;
  /* 2 */
  color: transparent !important;
  -webkit-text-fill-color: transparent !important;
  /* 3 */
  display: inline-block;
  // /* 4 */
  background-color: var(--au-text-background);

  @if (mixin-exists(hook-text-background)) {
    @include hook-text-background();
  }
}

/* Alignment modifiers
 ========================================================================== */

.uk-text-left {
  text-align: left !important;
}
.uk-text-right {
  text-align: right !important;
}
.uk-text-center {
  text-align: center !important;
}
.uk-text-justify {
  text-align: justify !important;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {
  .uk-text-left\@s {
    text-align: left !important;
  }
  .uk-text-right\@s {
    text-align: right !important;
  }
  .uk-text-center\@s {
    text-align: center !important;
  }
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {
  .uk-text-left\@m {
    text-align: left !important;
  }
  .uk-text-right\@m {
    text-align: right !important;
  }
  .uk-text-center\@m {
    text-align: center !important;
  }
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {
  .uk-text-left\@l {
    text-align: left !important;
  }
  .uk-text-right\@l {
    text-align: right !important;
  }
  .uk-text-center\@l {
    text-align: center !important;
  }
}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {
  .uk-text-left\@xl {
    text-align: left !important;
  }
  .uk-text-right\@xl {
    text-align: right !important;
  }
  .uk-text-center\@xl {
    text-align: center !important;
  }
}

/*
 * Vertical
 */

.uk-text-top {
  vertical-align: top !important;
}
.uk-text-middle {
  vertical-align: middle !important;
}
.uk-text-bottom {
  vertical-align: bottom !important;
}
.uk-text-baseline {
  vertical-align: baseline !important;
}

/* Wrap modifiers
 ========================================================================== */

/*
 * Prevent text from wrapping onto multiple lines
 */

.uk-text-nowrap {
  white-space: nowrap;
}

/*
 * 1. Make sure a max-width is set after which truncation can occur
 * 2. Prevent text from wrapping onto multiple lines, and truncate with an ellipsis
 * 3. Fix for table cells
 */

.uk-text-truncate {
  /* 1 */
  max-width: 100%;
  /* 2 */
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* 2 */
th.uk-text-truncate,
td.uk-text-truncate {
  max-width: 0;
}

/*
 * Wrap long words onto the next line and break them if they are too long to fit.
 * 1. Make it work with table cells in all browsers.
 * Note: Not using `hyphens: auto` because it hyphenates text even if not needed.
 */

.uk-text-break {
  overflow-wrap: break-word;
}

/* 1 */
th.uk-text-break,
td.uk-text-break {
  word-break: break-word;
}

// Hooks
// ========================================================================

@if (mixin-exists(hook-text-misc)) {
  @include hook-text-misc();
}
