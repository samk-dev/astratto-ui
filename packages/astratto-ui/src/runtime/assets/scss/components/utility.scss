:root {
  --au-util-border-rounded-border-radius: var(
    --au-global-border-radius-default
  );
  --au-dropcap-margin-right: 10px;
  --au-dropcap-font-size: calc(
    calc(var(--au-global-font-line-height) * 3) * 1em
  );

  --au-logo-font-size: var(--au-globa-large-font-size);
  --au-logo-font-family: var(--au-global-font-primary);
  --au-logo-color: var(--au-global-text-color-emphasis);
  --au-logo-hover-color: var(--au-global-text-color-emphasis);

  --au-drag-cursor: move;
  --au-dragover-shadow: 0 0 20px rgba(100, 100, 100, 0.3);
}

/* 1 */
.uk-clearfix::before {
  content: '';
  display: table-cell;
}

/* 2 */
.uk-clearfix::after {
  content: '';
  display: table;
  clear: both;
}

/* Float
 ========================================================================== */

/*
 * 1. Prevent content overflow
 */

.uk-float-left {
  float: left;
}
.uk-float-right {
  float: right;
}

/* 1 */
[class*='uk-float-'] {
  max-width: 100%;
}

/* Overfow
 ========================================================================== */

.uk-overflow-hidden {
  overflow: hidden;
}

/*
 * Enable scrollbars if content is clipped
 */

.uk-overflow-auto {
  overflow: auto;
}

.uk-overflow-auto > :last-child {
  margin-bottom: 0;
}

/* Box Sizing
 ========================================================================== */

.uk-box-sizing-content {
  box-sizing: content-box;
}
.uk-box-sizing-border {
  box-sizing: border-box;
}

/* Resize
 ========================================================================== */

.uk-resize {
  resize: both;
}
.uk-resize-horizontal {
  resize: horizontal;
}
.uk-resize-vertical {
  resize: vertical;
}

/* Display
 ========================================================================== */

.uk-display-block {
  display: block !important;
}
.uk-display-inline {
  display: inline !important;
}
.uk-display-inline-block {
  display: inline-block !important;
}

/* Inline
 ========================================================================== */

/*
 * 1. Container fits its content
 * 2. Create position context
 * 3. Prevent content overflow
 * 4. Behave like most inline-block elements
 * 5. Force new layer without creating a new stacking context
 *    to fix 1px glitch when combined with overlays and transitions in Webkit
 * 6. Clip child elements
 */

[class*='uk-inline'] {
  /* 1 */
  display: inline-block;
  /* 2 */
  position: relative;
  /* 3 */
  max-width: 100%;
  /* 4 */
  vertical-align: middle;
  /* 5 */
  -webkit-backface-visibility: hidden;
}

.uk-inline-clip {
  /* 6 */
  overflow: hidden;
}

/* Responsive objects
 ========================================================================== */

/*
 * Preserve original dimensions
 * Because `img, `video`, `canvas` and  `audio` are already responsive by default, see Base component
 */

.uk-preserve-width,
.uk-preserve-width canvas,
.uk-preserve-width img,
.uk-preserve-width svg,
.uk-preserve-width video {
  max-width: none;
}

/*
 * Responsiveness
 * Corrects `max-width` and `max-height` behavior if padding and border are used
 */

.uk-responsive-width,
.uk-responsive-height {
  box-sizing: border-box;
}

/*
 * 1. Set a maximum width. `important` needed to override `uk-preserve-width img`
 * 2. Auto scale the height. Only needed if `height` attribute is present
 */

.uk-responsive-width {
  /* 1 */
  max-width: 100% !important;
  /* 2 */
  height: auto;
}

/*
 * 1. Set a maximum height. Only works if the parent element has a fixed height
 * 2. Auto scale the width. Only needed if `width` attribute is present
 * 3. Reset max-width, which `img, `video`, `canvas` and  `audio` already have by default
 */

.uk-responsive-height {
  /* 1 */
  max-height: 100%;
  /* 2 */
  width: auto;
  /* 3 */
  max-width: none;
}

/*
 * Fix initial iframe width. Without the viewport is expanded on iOS devices
 */

[uk-responsive],
[data-uk-responsive] {
  max-width: 100%;
}

/* Object
 ========================================================================== */

.uk-object-cover {
  object-fit: cover;
}
.uk-object-contain {
  object-fit: contain;
}
.uk-object-fill {
  object-fit: fill;
}
.uk-object-none {
  object-fit: none;
}
.uk-object-scale-down {
  object-fit: scale-down;
}

/*
 * Position
 */

.uk-object-top-left {
  object-position: 0 0;
}
.uk-object-top-center {
  object-position: 50% 0;
}
.uk-object-top-right {
  object-position: 100% 0;
}
.uk-object-center-left {
  object-position: 0 50%;
}
.uk-object-center-center {
  object-position: 50% 50%;
}
.uk-object-center-right {
  object-position: 100% 50%;
}
.uk-object-bottom-left {
  object-position: 0 100%;
}
.uk-object-bottom-center {
  object-position: 50% 100%;
}
.uk-object-bottom-right {
  object-position: 100% 100%;
}

/* Border
 ========================================================================== */

.uk-border-circle {
  border-radius: var(--au-global-border-radius-full);
}
.uk-border-pill {
  border-radius: 500px;
}
.uk-border-rounded {
  border-radius: var(--au-util-border-rounded-border-radius);
}

/*
 * Fix `overflow: hidden` to be ignored with border-radius and CSS transforms in Webkit
 */

.uk-inline-clip[class*='uk-border-'] {
  -webkit-transform: translateZ(0);
}

/*
 * Fix `overflow: hidden` to be ignored with border-radius and CSS transforms in Webkit
 */

.uk-inline-clip[class*='uk-border-'] {
  -webkit-transform: translateZ(0);
}

/* Box-shadow
 ========================================================================== */

.uk-box-shadow-small {
  box-shadow: var(--au-global-small-box-shadow);
}
.uk-box-shadow-medium {
  box-shadow: var(--au-global-medium-box-shadow);
}
.uk-box-shadow-large {
  box-shadow: var(--au-global-large-box-shadow);
}
.uk-box-shadow-xlarge {
  box-shadow: var(--au-global-xlarge-box-shadow);
}

[class*='uk-box-shadow-hover'] {
  transition: box-shadow var(--au-global-box-shadow-duration) ease-in-out;
}

.uk-box-shadow-hover-small:hover {
  box-shadow: var(--au-global-small-box-shadow);
}
.uk-box-shadow-hover-medium:hover {
  box-shadow: var(--au-global-medium-box-shadow);
}
.uk-box-shadow-hover-large:hover {
  box-shadow: var(--au-global-large-box-shadow);
}
.uk-box-shadow-hover-xlarge:hover {
  box-shadow: var(--au-global-xlarge-box-shadow);
}

/* Box-shadow bottom
 ========================================================================== */

/*
 * 1. Set position.
 * 2. Set style
 * 3. Fix shadow being clipped in Safari if container is animated
 */

@supports (filter: blur(0)) {
  .uk-box-shadow-bottom {
    display: inline-block;
    position: relative;
    z-index: 0;
    max-width: 100%;
    vertical-align: middle;
  }

  .uk-box-shadow-bottom::after {
    content: '';
    /* 1 */
    position: absolute;
    bottom: (-var(--au-global-box-shadow-height));
    left: 0;
    right: 0;
    z-index: -1;
    /* 2 */
    height: var(--au-global-box-shadow-height);
    border-radius: var(--au-global-box-shadow-border-radius);
    background: var(--au-global-box-shadow-background);
    filter: blur(var(--au-global-box-shadow-blur));
    /* 3 */
    will-change: filter;
    @if (mixin-exists(hook-box-shadow-bottom)) {
      @include hook-box-shadow-bottom();
    }
  }
}

/* Drop cap
 ========================================================================== */

/*
 * 1. Firefox doesn't apply `::first-letter` if the first letter is inside child elements
 *    https://bugzilla.mozilla.org/show_bug.cgi?id=214004
 * 2. In Firefox, a floating `::first-letter` doesn't have a line box and there for no `line-height`
 *    https://bugzilla.mozilla.org/show_bug.cgi?id=317933
 */

.uk-dropcap::first-letter,
/* 1 */
.uk-dropcap > p:first-of-type::first-letter {
  display: block;
  margin-right: var(--au-dropcap-margin-right);
  float: left;
  font-size: var(--au-dropcap-font-size);
  line-height: 1;
  @if (mixin-exists(hook-dropcap)) {
    @include hook-dropcap();
  }
}

/* 2 */
@-moz-document url-prefix() {
  .uk-dropcap::first-letter,
  .uk-dropcap > p:first-of-type::first-letter {
    margin-top: 1.1%;
  }
}

/* Logo
 ========================================================================== */

/*
 * 1. Style
 * 2. Required for `a`
 * 3. Behave like image but can be overridden through flex utility classes
 */

.uk-logo {
  /* 1 */
  font-size: var(--au-logo-font-size);
  font-family: var(--au-logo-font-family);
  color: var(--au-logo-color);
  /* 2 */
  text-decoration: none;
  @if (mixin-exists(hook-logo)) {
    @include hook-logo();
  }
}

/* 3 */
:where(.uk-logo) {
  display: inline-block;
  vertical-align: middle;
}

@media (min-width: $breakpoint-small) {
  /* Hover */
  .uk-logo:hover {
    color: var(--au-logo-hover-color);
    /* 1 */
    text-decoration: none;
    @if (mixin-exists(hook-logo-hover)) {
      @include hook-logo-hover();
    }
  }
}

.uk-logo :where(img, svg, video) {
  display: block;
}

.uk-logo-inverse {
  display: none;
}

/* Disabled State
 ========================================================================== */

.uk-disabled {
  pointer-events: none;
}

/* Drag State
 ========================================================================== */

/*
 * 1. Needed if moving over elements with have their own cursor on hover, e.g. links or buttons
 * 2. Fix dragging over iframes
 */

.uk-drag,
/* 1 */
.uk-drag * {
  cursor: var(--au-drag-cursor);
}

/* 2 */
.uk-drag iframe {
  pointer-events: none;
}

/* Dragover State
 ========================================================================== */

/*
 * Create a box-shadow when dragging a file over the upload area
 */

.uk-dragover {
  box-shadow: var(--au-dragover-shadow);
}

/* Blend modes
 ========================================================================== */

.uk-blend-multiply {
  mix-blend-mode: multiply;
}
.uk-blend-screen {
  mix-blend-mode: screen;
}
.uk-blend-overlay {
  mix-blend-mode: overlay;
}
.uk-blend-darken {
  mix-blend-mode: darken;
}
.uk-blend-lighten {
  mix-blend-mode: lighten;
}
.uk-blend-color-dodge {
  mix-blend-mode: color-dodge;
}
.uk-blend-color-burn {
  mix-blend-mode: color-burn;
}
.uk-blend-hard-light {
  mix-blend-mode: hard-light;
}
.uk-blend-soft-light {
  mix-blend-mode: soft-light;
}
.uk-blend-difference {
  mix-blend-mode: difference;
}
.uk-blend-exclusion {
  mix-blend-mode: exclusion;
}
.uk-blend-hue {
  mix-blend-mode: hue;
}
.uk-blend-saturation {
  mix-blend-mode: saturation;
}
.uk-blend-color {
  mix-blend-mode: color;
}
.uk-blend-luminosity {
  mix-blend-mode: luminosity;
}

/* Transform
========================================================================== */

.uk-transform-center {
  transform: translate(-50%, -50%);
}

/* Transform Origin
========================================================================== */

.uk-transform-origin-top-left {
  transform-origin: 0 0;
}
.uk-transform-origin-top-center {
  transform-origin: 50% 0;
}
.uk-transform-origin-top-right {
  transform-origin: 100% 0;
}
.uk-transform-origin-center-left {
  transform-origin: 0 50%;
}
.uk-transform-origin-center-right {
  transform-origin: 100% 50%;
}
.uk-transform-origin-bottom-left {
  transform-origin: 0 100%;
}
.uk-transform-origin-bottom-center {
  transform-origin: 50% 100%;
}
.uk-transform-origin-bottom-right {
  transform-origin: 100% 100%;
}

// Hooks
// ========================================================================

@if (mixin-exists(hook-utility-misc)) {
  @include hook-utility-misc();
}
