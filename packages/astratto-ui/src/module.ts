import {
  addComponentsDir,
  addImportsDir,
  addPlugin,
  addTemplate,
  createResolver,
  defineNuxtModule,
  extendViteConfig
  /* installModule */
} from '@nuxt/kit'
import { name, version } from '../package.json'
import type { AuModuleOptions } from './types'

export default defineNuxtModule<AuModuleOptions>({
  meta: {
    name,
    version,
    configKey: 'astrattoUI',
    compatibility: {
      bridge: false,
      nuxt: '^3.0.0'
    }
  },
  defaults: {
    prefix: 'au'
  },
  async setup(options, nuxt) {
    const resolver = createResolver(import.meta.url)
    const nuxtOptions = nuxt.options

    addTemplate({
      filename: 'types/nuxt-uikit3.d.ts',
      getContents: () => `// Generated by nuxt-uikit3
        import type UIkit from 'uikit'

        declare module '#app' {
          interface NuxtApp {
            $uikit: UIkit;
          }
        }
        declare module '@vue/runtime-core' {
          interface ComponentCustomProperties {
            $uikit: UIkit;
          }
        }
        export {}`
    })
    // installModule('@samk-dev/nuxt-uikit3', {
    //   css: {
    //     coreCss: false,
    //     coreTheme: false,
    //     build: {
    //       preprocessor: 'scss',
    //       stylesPath: resolver.resolve('runtime/assets/scss/astratto-ui.scss'),
    //       variablesPath: resolver.resolve(
    //         'runtime/assets/scss/_variables.scss'
    //       ),
    //       mixinsPath: resolver.resolve('runtime/assets/scss/_mixins.scss')
    //     }
    //   },
    //   icons: false
    // })

    // nuxt.hook('nitro:config', (nitroConfig) => {
    //   nitroConfig.publicAssets ||= []
    //   nitroConfig.publicAssets.push({
    //     dir: resolver.resolve('./runtime/public'),
    //     maxAge: 60 * 60 * 24 * 365 // 1 year
    //   })
    // })

    // nuxt.options.app.head.script ||= []
    // nuxt.options.app.head.script.push({
    //   src: '/assets/uikit-icons.js',
    //   defer: true
    // })
    nuxtOptions.vite.css ||= {}
    nuxtOptions.vite.css.preprocessorOptions ||= {}
    nuxtOptions.vite.css.preprocessorOptions.scss ||= {}
    nuxtOptions.vite.css.preprocessorOptions.scss = {
      additionalData: `@import "${resolver.resolve(
        'runtime/assets/scss/_variables.scss'
      )}";`
    }

    nuxtOptions.vite.css.preprocessorOptions.scss = {
      additionalData: `@import "${resolver.resolve(
        'runtime/assets/scss/_mixins.scss'
      )}";`
    }

    nuxtOptions.css ||= []
    nuxtOptions.css.push(
      resolver.resolve('runtime/assets/scss/astratto-ui.scss')
    )

    addPlugin({
      src: resolver.resolve('runtime/plugins/uikit'),
      mode: 'client'
    })

    nuxt.hook('nitro:config', (nitroConfig) => {
      nitroConfig.publicAssets ||= []
      nitroConfig.publicAssets.push({
        dir: resolver.resolve('runtime/public'),
        maxAge: 60 * 60 * 24 * 365 // 1 year
      })
    })

    nuxtOptions.build.transpile ||= []
    nuxtOptions.build.transpile.push('uikit')
    nuxtOptions.build.transpile.push(
      resolver.resolve('runtime/public/assets/js/uikit-icons.mjs')
    )

    extendViteConfig((config) => {
      config.optimizeDeps = config.optimizeDeps || {}
      config.optimizeDeps.include = config.optimizeDeps.include || []
      config.optimizeDeps.include.push('uikit')
      config.optimizeDeps.include.push(
        resolver.resolve('runtime/public/assets/js/uikit-icons.mjs')
      )
    })

    await addComponentsDir({
      pathPrefix: false,
      path: resolver.resolve('runtime/components', 'base'),
      prefix: `${options.prefix}`,
      pattern: '**/*.vue',
      ignore: ['**/examples/*.vue'],
      transpile: true,
      global: false
    })

    await addComponentsDir({
      pathPrefix: false,
      path: resolver.resolve('runtime/components', 'form-elements'),
      prefix: `${options.prefix}`,
      pattern: '**/*.vue',
      ignore: ['**/examples/*.vue'],
      transpile: true,
      global: false
    })

    await addComponentsDir({
      pathPrefix: false,
      path: resolver.resolve('runtime/components', 'layout'),
      prefix: `${options.prefix}`,
      pattern: '**/*.vue',
      ignore: ['**/examples/*.vue'],
      transpile: true,
      global: false
    })

    await addComponentsDir({
      pathPrefix: false,
      path: resolver.resolve('runtime/components', 'overlays'),
      prefix: `${options.prefix}`,
      pattern: '**/*.vue',
      ignore: ['**/examples/*.vue'],
      transpile: true,
      global: false
    })

    addImportsDir(resolver.resolve('runtime/composables'))
  }
})
